[[api]]
== Network Programming Interfaces

=== POSIX Sockets

=== I/O Multiplexing with epoll

Userspace thread has an event handling loop, which calls either the `epoll_wait` or the `epoll_pwait` function to wait for events like connections or data. The `epoll_pwait` function is simply a variant of `epoll_wait` that lets users set process signal mask atomically with the wait so that the system call returns either when events become available or when a signal happens. The latter is useful if another threads needs to wake up a thread that is blocked on `epoll_wait` but is unable to cause an event `epoll_wait` can wait on.

In the Linux kernel, the `sys_epoll_wait` function handles both `epoll_wait` and `epoll_pwait` variants. The `sys_epoll_wait` function is responsible for verifying that the `events` array passed to it is writable by the kernel and looking up an internal `struct eventpoll` object for the passed `epfd` epoll file descriptor. The `sys_epoll_wait` function then calls `ep_wait`, which does the actual waiting on events.
 
The `ep_poll` function first calculates expiration time using the `timeout` argument passed from userspace. If `timeout` is zero, no expiration is needed because `ep_poll` is not supposed to sleep. If `timeout` is negative, expiration time is set to `NULL`, which causes the thread to sleep indefinitely. Once expiration time has been determined, `ep_poll` calls `ep_events_available` to see if there are events available. If not, `ep_poll` calls `ep_busy_loop`, which does polling in kernel if `CONFIG_NET_RX_BUSY_POLL` configuration option is enabled. The `ep_poll` function then acquires the `ep->lock` spinlock and checks for events again by calling `ep_events_available`. If there are events available, `ep_poll` delivers events to userspace by calling `ep_send_events` and returns. However, if there are no events, `ep_poll` adds current thread to a `struct eventpoll` wait queue and schedules itself out.

=== XDP: eXpress Data Path
